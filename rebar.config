%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et
%% This is a sample rebar.conf file that shows examples of some of rebar's
%% options.

%% Additional library directories to add to the code path
{lib_dirs, []}.

%% == Erlang Compiler ==

%% Erlang files to compile before the rest. Rebar automatically compiles
%% parse_transforms and custom behaviours before anything other than the files
%% in this list.
{erl_first_files, ["src/mymib1.erl", "src/mymib2.erl"]}.

%% Erlang compiler options
{erl_opts, [% no_debug_info,
            % {i, "myinclude"},
            {src_dirs, ["src",
                        "src/behaviours",
                        "src/conversation",
                        "src/monitor",
                        "src/parser",
                        "src/util",
                        "tests/monitor"
                       ]}
            ]}.

%% MIB Options?
{mib_opts, []}.

%% leex options
{xrl_opts, []}.

%% leex files to compile first
{xrl_first_files, ["src/parser/scribble_tokens.xrl"]}.

%% yecc options
{yrl_opts, []}.

%% yecc files to compile first
{yrl_first_files, ["src/parser/scribble_parser.yrl"]}.


%% == Cleanup ==

%% Which files to cleanup
% {clean_files, ["file", "file2"]}.

%% == OTP Applications ==

%% Enable validation of the OTP app module list. Default is 'true'
{validate_app_modules, true}.

%% == Dependencies ==

%% Where to put any downloaded dependencies. Default is "deps"
{deps_dir, "deps"}.

%% What dependencies we have, dependencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision).
%% Rebar currently supports git, hg, bzr, svn, rsync, fossil, and p4.
%   {deps, [app_name,
%           {rebar, "1.0.*"},
%           {rebar, ".*",
%            {git, "git://github.com/rebar/rebar.git"}},
%           {rebar, ".*",
%            {git, "git://github.com/rebar/rebar.git", "Rev"}},
%           {rebar, "1.0.*",
%            {git, "git://github.com/rebar/rebar.git", {branch, "master"}}},
%           {rebar, "1.0.0",
%            {git, "git://github.com/rebar/rebar.git", {tag, "1.0.0"}}},
%           %% Dependencies can be marked as 'raw'. Rebar does not require
%           %% such dependencies to have a standard Erlang/OTP layout
%           %% which assumes the presence of either
%           %% "src/dependency_name.app.src" or "ebin/dependency_name.app"
%           %% files.
%           %%
%           %% 'raw' dependencies can still contain 'rebar.config' and
%           %% even can have the proper OTP directory layout, but they
%           %% won't be compiled.
%           %%
%           %% Only a subset of rebar commands will be executed on the
%           %% 'raw' subdirectories: get-deps, update-deps, check-deps,
%           %% list-deps and delete-deps.
%           {rebar, "",
%            {git, "git://github.com/rebar/rebar.git", {branch, "master"}},
%            [raw]},
%           {app_name, ".*", {hg, "https://www.example.org/url"}},
%           {app_name, ".*", {rsync, "Url"}},
%           {app_name, ".*", {svn, "https://www.example.org/url"}},
%           {app_name, ".*", {svn, "svn://svn.example.org/url"}},
%           {app_name, ".*", {bzr, "https://www.example.org/url", "Rev"}},
%           {app_name, ".*", {fossil, "https://www.example.org/url"}},
%           {app_name, ".*", {fossil, "https://www.example.org/url", "Vsn"}},
%           {app_name, ".*", {p4, "//depot/subdir/app_dir"}}]}.

%% == Subdirectories ==

%% Subdirectories?
% {sub_dirs, ["dir1", "dir2"]}.

